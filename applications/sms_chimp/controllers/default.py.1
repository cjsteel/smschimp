# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simple replace the two lines below with:
    return auth.wiki()
    """
    return dict(message=T('Hello World'))

def contact_management():
    export_csv_link = A('export csv',_href=URL('export_contact_to_csv'))
    formcsv = FORM(str(T('or import from csv file')) + " ",
                       INPUT(_type='file', _name='csvfile'),
                       INPUT(_type='submit', _value=T('import')))
    if formcsv.process().accepted:
        try:
            import_contact_from_csv(request.vars.csvfile.file)
            response.flash = 'Import data successful'
        except Exception, e:
            response.flash = DIV(T('unable to parse csv file'), PRE(str(e)))
    return dict(import_csv = formcsv,export_csv = export_csv_link);

def export_contact_to_csv():
    import cStringIO
    s = cStringIO.StringIO()
    data = db(db.contact).select();
    data.export_to_csv_file(s)
    response.headers['Content-Type'] = 'text/csv'
    return s.getvalue()
def import_contact_from_csv(file):
        db.contact.import_from_csv_file(file)
        items = db(db.contact).select(db.contact.id,db.contact.phone_number,db.contact.group_name,
                                    orderby=db.contact.modified_on,
                                    groupby=db.contact.phone_number)
        for item in items:
            group_id = db(db.contact_group.name == item.group_name).select(db.contact_group.id).first()
            if group_id :
                item.contact_group_id = group_id 
            else :
                item.contact_group_id = db.contact_group.insert(item.group_name)
            item.update_record()

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
